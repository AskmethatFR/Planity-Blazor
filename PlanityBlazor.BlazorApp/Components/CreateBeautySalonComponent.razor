@using Fluxor
@using PlanityBlazor.BlazorApp.BeautySalonContext
@using PlanityBlazor.BlazorApp.BeautySalonContext.CreateBeautySalon
@using PlanityBlazor.BlazorApp.BeautySalonContext.GetBeautySalonsQuery
@using PlanityBlazor.BlazorApp.Shared.Reactive
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager
@inject IActionSubscriber ActionSubscriber
@inject IState<BeautySalonState> BeautySalonState
@inject AppSelector<BeautySalonState, CreationError> AppSelector


@implements IDisposable

<h3>CreateBeautySalonComponent</h3>

<InputText id="beautySalonNameInput" @bind-Value="Name"/>
@if (_isError)
{
    <span id="beauty-salon-name-error" class="blazor-error-boundary">@BeautySalonState.Value.Error</span>
}


<button @onclick="@CreateBeautySalon" id="createBeautySalonButton">Add</button>

@code {
    private IDisposable _subscription;
    private bool _isError;

    protected override void OnInitialized()
    {
        _subscription = AppSelector.Subscribe(OnNext());
        Dispatcher.Dispatch(new GetSalonsAction());
    }


    private Action<CreationError> OnNext()
    {
        return state =>
        {
            _isError = state.IsError;
            StateHasChanged();
        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ActionSubscriber.SubscribeToAction<CreateABeautySalonCompleteAction>(this, _ => { NavigationManager.NavigateTo("/BeautySalons"); });
        }
    }

    public string? Name { get; set; }

    private void CreateBeautySalon()
    {
        Dispatcher.Dispatch(new CreateABeautySalonAction(Name));
    }

    public void Dispose()
    {
        ActionSubscriber.UnsubscribeFromAllActions(this);
        _subscription.Dispose();
    }

}